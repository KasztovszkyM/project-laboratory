// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> result; 
RWStructuredBuffer<float2> eigenfunctions;
RWStructuredBuffer<float> coefs;
uint dimN, width, height;
/*
TODO: u(x,y) <-- Sum(N)[ w[i]*Phi[i] ]
    - N = basis | simulation parameter
    - w[N] = coefficient vector | recalculated every frame (could be here)
    - Phi[N] = velocity eigen functions | precalculated at the beginning
    - u[x,y] = velocity at given cell | calculated every frame here
    - x,y = cell coordinates [0;Pi[ | thread ID based
*/

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= width || id.y >= height) return;

    float2 velocity = float2(0.0f,0.0f);
    float speed = 0.0f;
    for(uint k = 0; k < dimN; k++){
        
        int index = k + (dimN * id.x) + (dimN * width * id.y);
        //int index = k + (dimN * (id.x + width * id.y));
        float2 currEigenfunction = eigenfunctions[index];
        float currCoef = coefs[k];

        velocity.x += currCoef * currEigenfunction.x;
        velocity.y += currCoef * currEigenfunction.y;

        speed = length(velocity);
    }
    
    //result[id.xy] = float4(velocity.x, abs(velocity.y), -velocity.x, 1.0f); 
    //result[id.xy] = float4(0.0f, 0.0f,0.0f, 1.0f)
    result[id.xy] = float4(speed,speed,speed, 1.0f); 
}
